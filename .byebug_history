continue
exit
city_temp(json_result)[:city]
city_temp(json_result).city
city_temp(json_result)
 json_result = json_request("conditions/q/%s.json" % [zip.to_s])
city_temp
zip
continue
fb
exit
params
weather_url("Denver")
params[:id]
@city
city
weather_url(@city.to_sym)
weather_url(:id)
weather_url(id:@city)
weather_url(@city)
exit
rake routes
weather_path
update_timeline_url
update_timeline_path
current_path
current_url
exit
@five_day_forecast[0]
@five_day_forecast
exit
hash[6]
hash[5]
hash[4]
hash[3]
hash[2]
hash[1]
hash[0]
hash = five[:list].map.with_index{|item,index| [item[:dt_txt].split[0],item[:weather].last[:description]]}
hash[0]
hash = five[:list].map.with_index{|item,index| [item[:dt_txt].split[0],item[:weather].last[:description]]}.to_h
five[:list].map.with_index{|item,index| [item[:dt_txt].split[0],item[:weather].last[:description]]}.to_h
five[:list].map.with_index{|item,index| [item[:dt_txt].split[0],item[:weather].first[:description]]}.to_h
five[:list].map.with_index{|item,index| [item[:dt_txt],item[:weather].first[:description]]}.to_h.count
five[:list].map.with_index{|item,index| [item[:dt_txt],item[:weather].first[:description]]}.to_h
five[:list].map.with_index{|item,index| [item[:dt_txt],item[:weather].first]}.to_h
five[:list].map.with_index{|item,index| [item[:dt_txt],item[:weather].first]}
five[:list].map.with_index{|item,index| [item[:weather].first]}
five[:list].map.with_index{|item,index| [item[:weather][:description]]}
five[:list].map.with_index{|item,index| [item[:weather]]}
five[:list].map.with_index{|item,index| [item]}
five[:list].map.with_index{|item,index| [item.first]}
five[:list].map.with_index{|item,index| [item.count]}
five[:list][0...5].map.with_index{|item,index| [item.count]}
five[:list][0...5].map.with_index{|item,index| [item[:dt_text],item[:weather][:description]]}
five[:list][0...5].map.with_index{|item,index| [item]}
five[:list][0...5].map.with_index{|item,index| [item[:dt_time]]}
five[:list][0...5].count
five[:list][0..,5].count
five[:list][0..5].count
five[:list][0..5]
five[:list]
five
l[:list][1]
l[:list][0]
l[:list].count
l[:list]
l.keys
l.class
l
l = parse(five,[:list])
five
list
list.count
list = parse(five,[:list])
parse(five,[:list])
five[:list].first
five[:list]
five
def parse(hash,keys) hash.select{|k,v| keys.include?(k) } end
weather
w.to_h
w
w.to_h
w[:weather]
results[:weather].first[:main]
results[:weather].first
results[:weather].main
results[:weather][:main]
results[:weather]
results
w.keys
w = parse(results,[:weather])
w
w = parse(results,[:weather])
results = parse(five[:list].first,[:dt_txt,:weather])
parse(five[:list].first,[:dt_txt,:weather])
def parse(hash,keys) hash.select{|k,v| keys.include?(k) } end
def parse(hash,keys){ hash.select{|k,v| keys.include?(k) } }
def parse(keys)
five[:list].first.select{|k,v| [:dt_txt, :weather].include?(k) }
five[:list].first.select{|k,v| [:dt_txt, :main].include?(k) }
five[:list].first.select{|k,v| [:dt_txt, :main].include?(key) }
five[:list].first
five[:list].first.methods
five[:list].first.map { |m| m[:main] }
five[:list].first
five.first
five.[:list].first
five.first[:list]
five[:list]
five.keys
five = @five_day_forecast
five = _
5 =_
@five_day_forecast.keys
@five_day_forecast[:main]
@five_day_forecast[:main].last
@five_day_forecast[:main.last
@five_day_forecast[:list].keys
@five_day_forecast[:list]
@five_day_forecast.keys
@five_day_forecast
exit
[path,params].join
response
exit
@five_day_forecast[:list].first
@five_day_forecast[:list].map{|e| e[:rain] }
@five_day_forecast[:list].map{|e| e[:main] }
@five_day_forecast[:list].first.keys
@five_day_forecast[:list].map{|e| e[:dt_txt] }
@five_day_forecast[:list].map{|e| e[:dt_txt]. }
@five_day_forecast[:list].map{|e| e[:dt_txt]. }.limit(5)
@five_day_forecast[:list].map{|e| e[:dt_txt].limit(5) }
@five_day_forecast[:list].map{|e| e[:weather] }
@five_day_forecast[:list].first.keys
@five_day_forecast[:list].map{|e| [e[:main][:temp], e[:dt_txt]] }
@five_day_forecast[:list].map{|e| [e[:temp], e[:dt_txt]] }
@five_day_forecast[:list].map{|e| e[:dt_txt] }
@five_day_forecast[:list].first.keys
@five_day_forecast[:list].first
@five_day_forecast[:list].each{|e| print e}
@five_day_forecast[:list].each{|e| p e}
@five_day_forecast[:list].count
@five_day_forecast[:list]
@five_day_forecast[:list].keys
@five_day_forecast[:list]
@five_day_forecast[:cnt]
@five_day_forecast[:cod]
@five_day_forecast[:city]
@five_day_forecast.[:city]
@five_day_forecast.keys
@five_day_forecast
continue
exit
json_request("/data/2.5/forecast?q=denver,us")exit
json_request("/data/2.5/forecast?q=denver,us")
json_request(@five_day_forecast)
@five_day_forecast.keys
@five_day_forecast
continue
@connection
exit
@five_day_forecast
exit
r = @connection.get '/data/2.5/forecast?q=Denver,us'
@connection.headers["Authorization"] = ENV["OPEN_WEATHER_APP_KEY"]
r = @connection.get '/data/2.5/forecast?q=Denver,us'
@connection
r = @connection.get '/data/2.5/forecast?q=Denver,us&appid=8a0bc04465812ade7169590e02dc38b4'
r = @connection.get '/data/2.5/forecast?q=Denver,us'
    @connection = Faraday.new(url:"http://api.openweathermap.org")
r = @connection.get "/forecast?q=Denver,us&appid=8a0bc04465812ade7169590e02dc38b4"
r = @connection.get '/forecast?q=Denver,us'
@connection
Faraday.new(url:"http://api.openweathermap.org/data/2.5/", "appid": ENV["OPEN_WEATHER_APP_KEY"]
Faraday.new(url:"http://api.openweathermap.org/data/2.5/", {"appid": ENV["OPEN_WEATHER_APP_KEY"]})
Faraday.new(url:"http://api.openweathermap.org/data/2.5/", appid: ENV["OPEN_WEATHER_APP_KEY"])
Faraday.new(url:"http://api.openweathermap.org/data/2.5/", {"appid": ENV["OPEN_WEATHER_APP_KEY"]})
Faraday.new(url:"http://api.openweathermap.org/data/2.5/", params => {"appid": ENV["OPEN_WEATHER_APP_KEY"]})
Faraday.new(url:"http://api.openweathermap.org/data/2.5/",{params: {"appid": ENV["OPEN_WEATHER_APP_KEY"]} })
Faraday.new(url:"http://api.openweathermap.org/data/2.5/",request_options)
request_options
    @connection = Faraday.new(url:"http://api.openweathermap.org/data/2.5/",request_options)
request_options = {params: {"appid": ENV["OPEN_WEATHER_APP_KEY"]} }
@connection
r = @connection.get '/forecast?q=Denver,us'
@connection.headers["Authorization"] = ENV["OPEN_WEA
r = @connection.get '/forecast?q=Denver,us'
r.body
r = @connection.get '/forecast?q=Denver,us'
@connection.get '/forecast?q=Denver,us'
    @connection = Faraday.new(url:"http://api.openweathermap.org/data/2.5/")c
@connection.get '/forecast?q=Denver,us'
@connection.get '/forecast?q=Denver'
@connection.get '/q=90210'
@connection
@connecntion.get "/data/2.5/forecast?q=#{city}&"
city
exit
Faraday.new(url:"api.openweathermap.org/data/2.5/forecast?q=#{five_day_forcast(city)}&#{ENV["OPEN_WEATHER_APP_KEY"]}")
@connection
city
exit
OpenWeatherService.new(params[:id])
params
continue
request.env["omniauth.auth"]
exit
request.env["omniauth.auth"]
exit
request.env["omniauth.auth"]
exit
request.env["omniauth.auth"]
exit
User.destroy_all
User.first
request.env["omniauth.auth"]
exit
User.first
User.first.update(oauth_token:'EAACEdEose0cBALWFTYPf2Nyr8kiZCurHSgZBUvoR82kZAepBb9nglR5YYYEvZAgfyayDcJCZAyHpxHeITzAEy9HdlXbYcX6QFGcWexEsgsvXo2BfFVWxKb4LGyfOhMR4ZBFo0o0e6OcLYwpH7JSa4LgBv0cESvqOky8tvSSAP6MQZDZD')
User.first.update(oauth_token:'EAACEdEose0cBALWFTYPf2Nyr8kiZCurHSgZBUvoR82kZAepBb9nglR5YYYEvZAgfyayDcJCZAyHpxHeITzAEy9HdlXbYcX6QFGcWexEsgsvXo2BfFVWxKb4LGyfOhMR4ZBFo0o0e6OcLYwpH7JSa4LgBv0cESvqOky8tvSSAP6MQZDZD'
User.first
request.env["omniauth.auth"]
exit
User.count
User
User.destroy_all
User.first
User.remove_all()
User.remove_all
User
request.env["omniauth.auth"]
request.env["omniauth.auth"].methods
request.env["omniauth.auth"].token
request.env["omniauth.auth"]
exit
User.all
User
auth = request.env["omniauth.auth"]
session['access_token']
current_user.oauth_token
current_user
exit
current_user
response
continue
session["access_token"]
current_user
session
exit
@connection
params
access_token
sessions
